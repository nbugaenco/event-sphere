name: Build and Deploy to GKE

on:
  push:
    branches: ["main"]

env:
  PROJECT_ID: event-sphere
  GAR_LOCATION: europe-central2
  GKE_CLUSTER: event-sphere-cluster
  GKE_ZONE: europe-central2
  DEPLOYMENT_NAME: event-sphere-deployment
  REPOSITORY: event-sphere-artifacts
  IMAGE: event-sphere-image

jobs:
  # Build artifacts
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Set up JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
          cache: "maven"
          server-id: github
          settings-path: ${{ github.workspace }}

      # Build artifact
      - name: Build with Maven
        run: mvn -B clean package --file pom.xml

      # Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-jar
          path: target/*.jar

  # Build Docker images and push it to GCP
  publish:
    name: Publish
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Download built artifact
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: app-jar
          path: target/

      # Authenticate to Google Cloud
      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v0"
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/878185350847/locations/global/workloadIdentityPools/event-sphere-github-pool/providers/event-sphere-github-provider"
          service_account: "event-sphere-service-account@event-sphere.iam.gserviceaccount.com"

      # Docker Configuration
      - name: Docker configuration
        run: |-
          echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev

      # Build Docker image
      - name: Build Docker image
        run: |-
          docker build \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .

      # Push Docker images to Google Cloud
      - name: Push Docker image to Google Artifact Registry
        run: |-
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"

  # Deploy to GKE
  deploy:
    name: Deploy
    needs: publish
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Authenticate to Google Cloud
      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v0"
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/878185350847/locations/global/workloadIdentityPools/event-sphere-github-pool/providers/event-sphere-github-provider"
          service_account: "event-sphere-service-account@event-sphere.iam.gserviceaccount.com"

      # Get the GKE credentials, so we can deploy to the cluster
      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          # replacing the image name in the k8s template
          ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide